{"version":3,"sources":["components/IPMap.js","components/SearchBar.js","components/DisplayIPInfo.js","api.js","utils/getStateAbbreviation.js","containers/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["Location","className","IPMap","props","ips","ip","lat","lng","style","height","width","bootstrapURLKeys","key","process","center","defaultZoom","options","fullscreenControl","zoomControl","map","pin","SearchBar","onSearch","useState","textInput","setInput","onSubmit","e","onChange","target","value","placeholder","required","type","aria-label","IPInfo","header","data","DisplayIPInfo","city","state","zipcode","isp","region","ipData","location","timezone","moment","tz","format","Object","keys","searchIp","a","params","URLSearchParams","set","fetch","toString","then","response","states","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Guam","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","Layout","componentDidMount","setIp","json","resJson","status","alert","message","setState","onSearchHandler","preventDefault","fullname","this","state_prov","time_zone","name","Number","latitude","longitude","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0841cd01.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport GoogleMapReact from 'google-map-react';\n\nimport './IPMap.css';\n\nconst isDevMode = process.env.NODE_ENV === 'development';\nconst Location = () => <div className=\"pin\" />;\n\nfunction IPMap(props) {\n  const zoom = 15;\n  const { ips, ips: [ip] } = props;\n  const { lat, lng } = ip;\n  return (\n    <div className=\"IPMap\">\n      <div style={{ height: '100%', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={isDevMode ? null\n            : { key: process.env.REACT_APP_MAP_API_KEY }}\n          center={{ lat, lng }}\n          defaultZoom={zoom}\n          options={{ fullscreenControl: false, zoomControl: false }}\n        >\n          {ips.map((pin) => <Location key={pin.lat + pin.lng} lat={pin.lat} lng={pin.lng} />)}\n        </GoogleMapReact>\n      </div>\n    </div>\n  );\n}\n\nexport default IPMap;\n\nIPMap.propTypes = {\n  ips: PropTypes.arrayOf(PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './SearchBar.css';\n\nfunction SearchBar({ onSearch }) {\n  const [textInput, setInput] = useState('');\n\n  const inputHandler = (e) => { setInput(e.target.value); };\n\n  const placeholder = 'Search for any IP address or domain';\n\n  return (\n    <form className=\"SearchBar flex-by-row\" onSubmit={(e) => onSearch(e, textInput)}>\n      <input\n        onChange={inputHandler}\n        placeholder={placeholder}\n        required\n        type=\"text\"\n        value={textInput}\n      />\n      <button aria-label=\"submit\" type=\"submit\" />\n    </form>\n  );\n}\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment-timezone';\n\nimport './DisplayIPInfo.css';\n\nconst IPInfo = ({ header, data }) => (\n  <div className=\"ipInfo flex-by-column\">\n    <span className=\"ipInfo__title\">{header}</span>\n    <span className=\"ipInfo__content\">{data}</span>\n  </div>\n);\n\nconst DisplayIPInfo = (props) => {\n  const {\n    ip,\n    city,\n    state,\n    zipcode,\n    isp,\n    region,\n  } = props;\n\n  const ipData = {\n    'ip address': ip,\n    location: `${city}, ${state} ${zipcode}`,\n    timezone: `UTC ${moment.tz(region).format('Z')}`,\n    isp,\n  };\n\n  return (\n    <div className=\"DisplayIPInfo--position\">\n      <div className=\"DisplayIPInfo\">\n        {Object.keys(ipData).map((key) => <IPInfo key={key} header={key} data={ipData[key]} />)}\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayIPInfo;\n\nIPInfo.propTypes = {\n  header: PropTypes.string.isRequired,\n  data: PropTypes.string.isRequired,\n};\n\nDisplayIPInfo.propTypes = {\n  ip: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  state: PropTypes.string.isRequired,\n  zipcode: PropTypes.string.isRequired,\n  isp: PropTypes.string.isRequired,\n  region: PropTypes.string.isRequired,\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport async function searchIp(ip) {\n  /* Search for IPv4/IPv6 address. If ip not supplied the current IP address will be used */\n  const api = 'https://api.ipgeolocation.io/ipgeo?';\n  const params = new URLSearchParams();\n  params.set('apiKey', process.env.REACT_APP_IP_GEO_KEY);\n  params.set('ip', ip || '');\n  return fetch(`${api}${params.toString()}`).then((response) => response);\n}\n","const states = {\n  Alabama: 'AL',\n  Alaska: 'AK',\n  'American Samoa': 'AS',\n  Arizona: 'AZ',\n  Arkansas: 'AR',\n  'Armed Forces Americas': 'AA',\n  'Armed Forces Europe': 'AE',\n  'Armed Forces Pacific': 'AP',\n  California: 'CA',\n  Colorado: 'CO',\n  Connecticut: 'CT',\n  Delaware: 'DE',\n  'District Of Columbia': 'DC',\n  Florida: 'FL',\n  Georgia: 'GA',\n  Guam: 'GU',\n  Hawaii: 'HI',\n  Idaho: 'ID',\n  Illinois: 'IL',\n  Indiana: 'IN',\n  Iowa: 'IA',\n  Kansas: 'KS',\n  Kentucky: 'KY',\n  Louisiana: 'LA',\n  Maine: 'ME',\n  'Marshall Islands': 'MH',\n  Maryland: 'MD',\n  Massachusetts: 'MA',\n  Michigan: 'MI',\n  Minnesota: 'MN',\n  Mississippi: 'MS',\n  Missouri: 'MO',\n  Montana: 'MT',\n  Nebraska: 'NE',\n  Nevada: 'NV',\n  'New Hampshire': 'NH',\n  'New Jersey': 'NJ',\n  'New Mexico': 'NM',\n  'New York': 'NY',\n  'North Carolina': 'NC',\n  'North Dakota': 'ND',\n  'Northern Mariana Islands': 'NP',\n  Ohio: 'OH',\n  Oklahoma: 'OK',\n  Oregon: 'OR',\n  Pennsylvania: 'PA',\n  'Puerto Rico': 'PR',\n  'Rhode Island': 'RI',\n  'South Carolina': 'SC',\n  'South Dakota': 'SD',\n  Tennessee: 'TN',\n  Texas: 'TX',\n  'US Virgin Islands': 'VI',\n  Utah: 'UT',\n  Vermont: 'VT',\n  Virginia: 'VA',\n  Washington: 'WA',\n  'West Virginia': 'WV',\n  Wisconsin: 'WI',\n  Wyoming: 'WY',\n};\n\nexport default function getStateAbbreviation(fullname) {\n  return fullname in states ? states[fullname] : fullname;\n}\n","import React from 'react';\n\nimport IPMap from '../components/IPMap';\nimport SearchBar from '../components/SearchBar';\nimport DisplayIPInfo from '../components/DisplayIPInfo';\n\nimport { searchIp } from '../api';\nimport getStateAbbreviation from '../utils/getStateAbbreviation';\nimport './Layout.css';\n\nclass Layout extends React.Component {\n  constructor() {\n    super();\n\n    this.state = { ip: null };\n  }\n\n  componentDidMount = async () => {\n    this.setIp();\n  }\n\n  setIp = async (ip) => {\n    const response = await searchIp(ip);\n    const resJson = await response.json();\n    // eslint-disable-next-line no-alert\n    if (response.status !== 200) return alert(`An error has occured: ${resJson.message}\\n\\nPlease try again`);\n    this.setState({ ip: resJson });\n    return response;\n  };\n\n  onSearchHandler = (e, textInput) => {\n    e.preventDefault();\n    return this.setIp(textInput);\n  }\n\n  render() {\n    const { ip } = this.state;\n    return (\n      <div className=\"Layout flex-by-column\">\n        <div className=\"header flex-by-column\">\n          <span className=\"title\">IP Address Tracker</span>\n          <SearchBar onSearch={this.onSearchHandler} />\n        </div>\n        {!ip ? null\n          : (\n            <>\n              <DisplayIPInfo\n                ip={ip.ip}\n                city={ip.city}\n                state={getStateAbbreviation(ip.state_prov)}\n                zipcode={ip.zipcode}\n                isp={ip.isp}\n                region={ip.time_zone.name}\n              />\n              <IPMap ips={[{ lat: Number(ip.latitude), lng: Number(ip.longitude) }]} />\n            </>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import React from 'react';\n\nimport Layout from './containers/Layout';\nimport './App.css';\n\nfunction App() {\n  return <div className=\"App\"><Layout /></div>;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}